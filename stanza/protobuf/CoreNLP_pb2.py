# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: CoreNLP.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\rCoreNLP.proto\x12\x19\x65\x64u.stanford.nlp.pipeline\"\xe1\x05\n\x08\x44ocument\x12\x0c\n\x04text\x18\x01 \x02(\t\x12\x35\n\x08sentence\x18\x02 \x03(\x0b\x32#.edu.stanford.nlp.pipeline.Sentence\x12\x39\n\ncorefChain\x18\x03 \x03(\x0b\x32%.edu.stanford.nlp.pipeline.CorefChain\x12\r\n\x05\x64ocID\x18\x04 \x01(\t\x12\x0f\n\x07\x64ocDate\x18\x07 \x01(\t\x12\x10\n\x08\x63\x61lendar\x18\x08 \x01(\x04\x12;\n\x11sentencelessToken\x18\x05 \x03(\x0b\x32 .edu.stanford.nlp.pipeline.Token\x12\x33\n\tcharacter\x18\n \x03(\x0b\x32 .edu.stanford.nlp.pipeline.Token\x12/\n\x05quote\x18\x06 \x03(\x0b\x32 .edu.stanford.nlp.pipeline.Quote\x12\x37\n\x08mentions\x18\t \x03(\x0b\x32%.edu.stanford.nlp.pipeline.NERMention\x12#\n\x1bhasEntityMentionsAnnotation\x18\r \x01(\x08\x12\x0e\n\x06xmlDoc\x18\x0b \x01(\x08\x12\x34\n\x08sections\x18\x0c \x03(\x0b\x32\".edu.stanford.nlp.pipeline.Section\x12<\n\x10mentionsForCoref\x18\x0e \x03(\x0b\x32\".edu.stanford.nlp.pipeline.Mention\x12!\n\x19hasCorefMentionAnnotation\x18\x0f \x01(\x08\x12\x1a\n\x12hasCorefAnnotation\x18\x10 \x01(\x08\x12+\n#corefMentionToEntityMentionMappings\x18\x11 \x03(\x05\x12+\n#entityMentionToCorefMentionMappings\x18\x12 \x03(\x05*\x05\x08\x64\x10\x80\x02\"\xf3\x0f\n\x08Sentence\x12/\n\x05token\x18\x01 \x03(\x0b\x32 .edu.stanford.nlp.pipeline.Token\x12\x18\n\x10tokenOffsetBegin\x18\x02 \x02(\r\x12\x16\n\x0etokenOffsetEnd\x18\x03 \x02(\r\x12\x15\n\rsentenceIndex\x18\x04 \x01(\r\x12\x1c\n\x14\x63haracterOffsetBegin\x18\x05 \x01(\r\x12\x1a\n\x12\x63haracterOffsetEnd\x18\x06 \x01(\r\x12\x37\n\tparseTree\x18\x07 \x01(\x0b\x32$.edu.stanford.nlp.pipeline.ParseTree\x12@\n\x12\x62inarizedParseTree\x18\x1f \x01(\x0b\x32$.edu.stanford.nlp.pipeline.ParseTree\x12@\n\x12\x61nnotatedParseTree\x18  \x01(\x0b\x32$.edu.stanford.nlp.pipeline.ParseTree\x12\x11\n\tsentiment\x18! \x01(\t\x12=\n\x0fkBestParseTrees\x18\" \x03(\x0b\x32$.edu.stanford.nlp.pipeline.ParseTree\x12\x45\n\x11\x62\x61sicDependencies\x18\x08 \x01(\x0b\x32*.edu.stanford.nlp.pipeline.DependencyGraph\x12I\n\x15\x63ollapsedDependencies\x18\t \x01(\x0b\x32*.edu.stanford.nlp.pipeline.DependencyGraph\x12T\n collapsedCCProcessedDependencies\x18\n \x01(\x0b\x32*.edu.stanford.nlp.pipeline.DependencyGraph\x12K\n\x17\x61lternativeDependencies\x18\r \x01(\x0b\x32*.edu.stanford.nlp.pipeline.DependencyGraph\x12?\n\x0copenieTriple\x18\x0e \x03(\x0b\x32).edu.stanford.nlp.pipeline.RelationTriple\x12<\n\tkbpTriple\x18\x10 \x03(\x0b\x32).edu.stanford.nlp.pipeline.RelationTriple\x12\x45\n\x10\x65ntailedSentence\x18\x0f \x03(\x0b\x32+.edu.stanford.nlp.pipeline.SentenceFragment\x12\x43\n\x0e\x65ntailedClause\x18# \x03(\x0b\x32+.edu.stanford.nlp.pipeline.SentenceFragment\x12H\n\x14\x65nhancedDependencies\x18\x11 \x01(\x0b\x32*.edu.stanford.nlp.pipeline.DependencyGraph\x12P\n\x1c\x65nhancedPlusPlusDependencies\x18\x12 \x01(\x0b\x32*.edu.stanford.nlp.pipeline.DependencyGraph\x12\x33\n\tcharacter\x18\x13 \x03(\x0b\x32 .edu.stanford.nlp.pipeline.Token\x12\x11\n\tparagraph\x18\x0b \x01(\r\x12\x0c\n\x04text\x18\x0c \x01(\t\x12\x12\n\nlineNumber\x18\x14 \x01(\r\x12\x1e\n\x16hasRelationAnnotations\x18\x33 \x01(\x08\x12\x31\n\x06\x65ntity\x18\x34 \x03(\x0b\x32!.edu.stanford.nlp.pipeline.Entity\x12\x35\n\x08relation\x18\x35 \x03(\x0b\x32#.edu.stanford.nlp.pipeline.Relation\x12$\n\x1chasNumerizedTokensAnnotation\x18\x36 \x01(\x08\x12\x37\n\x08mentions\x18\x37 \x03(\x0b\x32%.edu.stanford.nlp.pipeline.NERMention\x12<\n\x10mentionsForCoref\x18\x38 \x03(\x0b\x32\".edu.stanford.nlp.pipeline.Mention\x12\"\n\x1ahasCorefMentionsAnnotation\x18\x39 \x01(\x08\x12\x12\n\nsentenceID\x18: \x01(\t\x12\x13\n\x0bsectionDate\x18; \x01(\t\x12\x14\n\x0csectionIndex\x18< \x01(\r\x12\x13\n\x0bsectionName\x18= \x01(\t\x12\x15\n\rsectionAuthor\x18> \x01(\t\x12\r\n\x05\x64ocID\x18? \x01(\t\x12\x15\n\rsectionQuoted\x18@ \x01(\x08\x12#\n\x1bhasEntityMentionsAnnotation\x18\x41 \x01(\x08\x12\x1f\n\x17hasKBPTriplesAnnotation\x18\x44 \x01(\x08\x12\"\n\x1ahasOpenieTriplesAnnotation\x18\x45 \x01(\x08\x12\x14\n\x0c\x63hapterIndex\x18\x42 \x01(\r\x12\x16\n\x0eparagraphIndex\x18\x43 \x01(\r\x12=\n\x10\x65nhancedSentence\x18\x46 \x01(\x0b\x32#.edu.stanford.nlp.pipeline.Sentence\x12\x0f\n\x07speaker\x18G \x01(\t\x12\x13\n\x0bspeakerType\x18H \x01(\t*\x05\x08\x64\x10\x80\x02\"\xc2\x0c\n\x05Token\x12\x0c\n\x04word\x18\x01 \x01(\t\x12\x0b\n\x03pos\x18\x02 \x01(\t\x12\r\n\x05value\x18\x03 \x01(\t\x12\x10\n\x08\x63\x61tegory\x18\x04 \x01(\t\x12\x0e\n\x06\x62\x65\x66ore\x18\x05 \x01(\t\x12\r\n\x05\x61\x66ter\x18\x06 \x01(\t\x12\x14\n\x0coriginalText\x18\x07 \x01(\t\x12\x0b\n\x03ner\x18\x08 \x01(\t\x12\x11\n\tcoarseNER\x18> \x01(\t\x12\x16\n\x0e\x66ineGrainedNER\x18? \x01(\t\x12\x15\n\rnerLabelProbs\x18\x42 \x03(\t\x12\x15\n\rnormalizedNER\x18\t \x01(\t\x12\r\n\x05lemma\x18\n \x01(\t\x12\x11\n\tbeginChar\x18\x0b \x01(\r\x12\x0f\n\x07\x65ndChar\x18\x0c \x01(\r\x12\x11\n\tutterance\x18\r \x01(\r\x12\x0f\n\x07speaker\x18\x0e \x01(\t\x12\x13\n\x0bspeakerType\x18M \x01(\t\x12\x12\n\nbeginIndex\x18\x0f \x01(\r\x12\x10\n\x08\x65ndIndex\x18\x10 \x01(\r\x12\x17\n\x0ftokenBeginIndex\x18\x11 \x01(\r\x12\x15\n\rtokenEndIndex\x18\x12 \x01(\r\x12\x34\n\ntimexValue\x18\x13 \x01(\x0b\x32 .edu.stanford.nlp.pipeline.Timex\x12\x15\n\rhasXmlContext\x18\x15 \x01(\x08\x12\x12\n\nxmlContext\x18\x16 \x03(\t\x12\x16\n\x0e\x63orefClusterID\x18\x17 \x01(\r\x12\x0e\n\x06\x61nswer\x18\x18 \x01(\t\x12\x15\n\rheadWordIndex\x18\x1a \x01(\r\x12\x35\n\x08operator\x18\x1b \x01(\x0b\x32#.edu.stanford.nlp.pipeline.Operator\x12\x35\n\x08polarity\x18\x1c \x01(\x0b\x32#.edu.stanford.nlp.pipeline.Polarity\x12\x14\n\x0cpolarity_dir\x18\' \x01(\t\x12-\n\x04span\x18\x1d \x01(\x0b\x32\x1f.edu.stanford.nlp.pipeline.Span\x12\x11\n\tsentiment\x18\x1e \x01(\t\x12\x16\n\x0equotationIndex\x18\x1f \x01(\x05\x12\x42\n\x0e\x63onllUFeatures\x18  \x01(\x0b\x32*.edu.stanford.nlp.pipeline.MapStringString\x12\x11\n\tcoarseTag\x18! \x01(\t\x12\x38\n\x0f\x63onllUTokenSpan\x18\" \x01(\x0b\x32\x1f.edu.stanford.nlp.pipeline.Span\x12\x12\n\nconllUMisc\x18# \x01(\t\x12G\n\x13\x63onllUSecondaryDeps\x18$ \x01(\x0b\x32*.edu.stanford.nlp.pipeline.MapStringString\x12\x17\n\x0fwikipediaEntity\x18% \x01(\t\x12\x11\n\tisNewline\x18& \x01(\x08\x12\x0e\n\x06gender\x18\x33 \x01(\t\x12\x10\n\x08trueCase\x18\x34 \x01(\t\x12\x14\n\x0ctrueCaseText\x18\x35 \x01(\t\x12\x13\n\x0b\x63hineseChar\x18\x36 \x01(\t\x12\x12\n\nchineseSeg\x18\x37 \x01(\t\x12\x16\n\x0e\x63hineseXMLChar\x18< \x01(\t\x12\x11\n\tarabicSeg\x18L \x01(\t\x12\x13\n\x0bsectionName\x18\x38 \x01(\t\x12\x15\n\rsectionAuthor\x18\x39 \x01(\t\x12\x13\n\x0bsectionDate\x18: \x01(\t\x12\x17\n\x0fsectionEndLabel\x18; \x01(\t\x12\x0e\n\x06parent\x18= \x01(\t\x12\x19\n\x11\x63orefMentionIndex\x18@ \x03(\r\x12\x1a\n\x12\x65ntityMentionIndex\x18\x41 \x01(\r\x12\r\n\x05isMWT\x18\x43 \x01(\x08\x12\x12\n\nisFirstMWT\x18\x44 \x01(\x08\x12\x0f\n\x07mwtText\x18\x45 \x01(\t\x12\x14\n\x0cnumericValue\x18\x46 \x01(\x04\x12\x13\n\x0bnumericType\x18G \x01(\t\x12\x1d\n\x15numericCompositeValue\x18H \x01(\x04\x12\x1c\n\x14numericCompositeType\x18I \x01(\t\x12\x1c\n\x14\x63odepointOffsetBegin\x18J \x01(\r\x12\x1a\n\x12\x63odepointOffsetEnd\x18K \x01(\r*\x05\x08\x64\x10\x80\x02\"\xe4\x03\n\x05Quote\x12\x0c\n\x04text\x18\x01 \x01(\t\x12\r\n\x05\x62\x65gin\x18\x02 \x01(\r\x12\x0b\n\x03\x65nd\x18\x03 \x01(\r\x12\x15\n\rsentenceBegin\x18\x05 \x01(\r\x12\x13\n\x0bsentenceEnd\x18\x06 \x01(\r\x12\x12\n\ntokenBegin\x18\x07 \x01(\r\x12\x10\n\x08tokenEnd\x18\x08 \x01(\r\x12\r\n\x05\x64ocid\x18\t \x01(\t\x12\r\n\x05index\x18\n \x01(\r\x12\x0e\n\x06\x61uthor\x18\x0b \x01(\t\x12\x0f\n\x07mention\x18\x0c \x01(\t\x12\x14\n\x0cmentionBegin\x18\r \x01(\r\x12\x12\n\nmentionEnd\x18\x0e \x01(\r\x12\x13\n\x0bmentionType\x18\x0f \x01(\t\x12\x14\n\x0cmentionSieve\x18\x10 \x01(\t\x12\x0f\n\x07speaker\x18\x11 \x01(\t\x12\x14\n\x0cspeakerSieve\x18\x12 \x01(\t\x12\x18\n\x10\x63\x61nonicalMention\x18\x13 \x01(\t\x12\x1d\n\x15\x63\x61nonicalMentionBegin\x18\x14 \x01(\r\x12\x1b\n\x13\x63\x61nonicalMentionEnd\x18\x15 \x01(\r\x12N\n\x1a\x61ttributionDependencyGraph\x18\x16 \x01(\x0b\x32*.edu.stanford.nlp.pipeline.DependencyGraph\"\xc7\x01\n\tParseTree\x12\x33\n\x05\x63hild\x18\x01 \x03(\x0b\x32$.edu.stanford.nlp.pipeline.ParseTree\x12\r\n\x05value\x18\x02 \x01(\t\x12\x17\n\x0fyieldBeginIndex\x18\x03 \x01(\r\x12\x15\n\ryieldEndIndex\x18\x04 \x01(\r\x12\r\n\x05score\x18\x05 \x01(\x01\x12\x37\n\tsentiment\x18\x06 \x01(\x0e\x32$.edu.stanford.nlp.pipeline.Sentiment\"\x96\x03\n\x0f\x44\x65pendencyGraph\x12=\n\x04node\x18\x01 \x03(\x0b\x32/.edu.stanford.nlp.pipeline.DependencyGraph.Node\x12=\n\x04\x65\x64ge\x18\x02 \x03(\x0b\x32/.edu.stanford.nlp.pipeline.DependencyGraph.Edge\x12\x10\n\x04root\x18\x03 \x03(\rB\x02\x10\x01\x1a\x44\n\x04Node\x12\x15\n\rsentenceIndex\x18\x01 \x02(\r\x12\r\n\x05index\x18\x02 \x02(\r\x12\x16\n\x0e\x63opyAnnotation\x18\x03 \x01(\r\x1a\xac\x01\n\x04\x45\x64ge\x12\x0e\n\x06source\x18\x01 \x02(\r\x12\x0e\n\x06target\x18\x02 \x02(\r\x12\x0b\n\x03\x64\x65p\x18\x03 \x01(\t\x12\x0f\n\x07isExtra\x18\x04 \x01(\x08\x12\x12\n\nsourceCopy\x18\x05 \x01(\r\x12\x12\n\ntargetCopy\x18\x06 \x01(\r\x12>\n\x08language\x18\x07 \x01(\x0e\x32#.edu.stanford.nlp.pipeline.Language:\x07Unknown\"\xc6\x02\n\nCorefChain\x12\x0f\n\x07\x63hainID\x18\x01 \x02(\x05\x12\x43\n\x07mention\x18\x02 \x03(\x0b\x32\x32.edu.stanford.nlp.pipeline.CorefChain.CorefMention\x12\x16\n\x0erepresentative\x18\x03 \x02(\r\x1a\xc9\x01\n\x0c\x43orefMention\x12\x11\n\tmentionID\x18\x01 \x01(\x05\x12\x13\n\x0bmentionType\x18\x02 \x01(\t\x12\x0e\n\x06number\x18\x03 \x01(\t\x12\x0e\n\x06gender\x18\x04 \x01(\t\x12\x0f\n\x07\x61nimacy\x18\x05 \x01(\t\x12\x12\n\nbeginIndex\x18\x06 \x01(\r\x12\x10\n\x08\x65ndIndex\x18\x07 \x01(\r\x12\x11\n\theadIndex\x18\t \x01(\r\x12\x15\n\rsentenceIndex\x18\n \x01(\r\x12\x10\n\x08position\x18\x0b \x01(\r\"\xef\x08\n\x07Mention\x12\x11\n\tmentionID\x18\x01 \x01(\x05\x12\x13\n\x0bmentionType\x18\x02 \x01(\t\x12\x0e\n\x06number\x18\x03 \x01(\t\x12\x0e\n\x06gender\x18\x04 \x01(\t\x12\x0f\n\x07\x61nimacy\x18\x05 \x01(\t\x12\x0e\n\x06person\x18\x06 \x01(\t\x12\x12\n\nstartIndex\x18\x07 \x01(\r\x12\x10\n\x08\x65ndIndex\x18\t \x01(\r\x12\x11\n\theadIndex\x18\n \x01(\x05\x12\x12\n\nheadString\x18\x0b \x01(\t\x12\x11\n\tnerString\x18\x0c \x01(\t\x12\x13\n\x0boriginalRef\x18\r \x01(\x05\x12\x1a\n\x12goldCorefClusterID\x18\x0e \x01(\x05\x12\x16\n\x0e\x63orefClusterID\x18\x0f \x01(\x05\x12\x12\n\nmentionNum\x18\x10 \x01(\x05\x12\x0f\n\x07sentNum\x18\x11 \x01(\x05\x12\r\n\x05utter\x18\x12 \x01(\x05\x12\x11\n\tparagraph\x18\x13 \x01(\x05\x12\x11\n\tisSubject\x18\x14 \x01(\x08\x12\x16\n\x0eisDirectObject\x18\x15 \x01(\x08\x12\x18\n\x10isIndirectObject\x18\x16 \x01(\x08\x12\x1b\n\x13isPrepositionObject\x18\x17 \x01(\x08\x12\x0f\n\x07hasTwin\x18\x18 \x01(\x08\x12\x0f\n\x07generic\x18\x19 \x01(\x08\x12\x13\n\x0bisSingleton\x18\x1a \x01(\x08\x12\x1a\n\x12hasBasicDependency\x18\x1b \x01(\x08\x12\x1d\n\x15hasEnhancedDepenedncy\x18\x1c \x01(\x08\x12\x1b\n\x13hasContextParseTree\x18\x1d \x01(\x08\x12?\n\x0fheadIndexedWord\x18\x1e \x01(\x0b\x32&.edu.stanford.nlp.pipeline.IndexedWord\x12=\n\rdependingVerb\x18\x1f \x01(\x0b\x32&.edu.stanford.nlp.pipeline.IndexedWord\x12\x38\n\x08headWord\x18  \x01(\x0b\x32&.edu.stanford.nlp.pipeline.IndexedWord\x12;\n\x0bspeakerInfo\x18! \x01(\x0b\x32&.edu.stanford.nlp.pipeline.SpeakerInfo\x12=\n\rsentenceWords\x18\x32 \x03(\x0b\x32&.edu.stanford.nlp.pipeline.IndexedWord\x12<\n\x0coriginalSpan\x18\x33 \x03(\x0b\x32&.edu.stanford.nlp.pipeline.IndexedWord\x12\x12\n\ndependents\x18\x34 \x03(\t\x12\x19\n\x11preprocessedTerms\x18\x35 \x03(\t\x12\x13\n\x0b\x61ppositions\x18\x36 \x03(\x05\x12\x1c\n\x14predicateNominatives\x18\x37 \x03(\x05\x12\x18\n\x10relativePronouns\x18\x38 \x03(\x05\x12\x13\n\x0blistMembers\x18\x39 \x03(\x05\x12\x15\n\rbelongToLists\x18: \x03(\x05\"X\n\x0bIndexedWord\x12\x13\n\x0bsentenceNum\x18\x01 \x01(\x05\x12\x12\n\ntokenIndex\x18\x02 \x01(\x05\x12\r\n\x05\x64ocID\x18\x03 \x01(\x05\x12\x11\n\tcopyCount\x18\x04 \x01(\r\"4\n\x0bSpeakerInfo\x12\x13\n\x0bspeakerName\x18\x01 \x01(\t\x12\x10\n\x08mentions\x18\x02 \x03(\x05\"\"\n\x04Span\x12\r\n\x05\x62\x65gin\x18\x01 \x02(\r\x12\x0b\n\x03\x65nd\x18\x02 \x02(\r\"w\n\x05Timex\x12\r\n\x05value\x18\x01 \x01(\t\x12\x10\n\x08\x61ltValue\x18\x02 \x01(\t\x12\x0c\n\x04text\x18\x03 \x01(\t\x12\x0c\n\x04type\x18\x04 \x01(\t\x12\x0b\n\x03tid\x18\x05 \x01(\t\x12\x12\n\nbeginPoint\x18\x06 \x01(\r\x12\x10\n\x08\x65ndPoint\x18\x07 \x01(\r\"\xdb\x01\n\x06\x45ntity\x12\x11\n\theadStart\x18\x06 \x01(\r\x12\x0f\n\x07headEnd\x18\x07 \x01(\r\x12\x13\n\x0bmentionType\x18\x08 \x01(\t\x12\x16\n\x0enormalizedName\x18\t \x01(\t\x12\x16\n\x0eheadTokenIndex\x18\n \x01(\r\x12\x0f\n\x07\x63orefID\x18\x0b \x01(\t\x12\x10\n\x08objectID\x18\x01 \x01(\t\x12\x13\n\x0b\x65xtentStart\x18\x02 \x01(\r\x12\x11\n\textentEnd\x18\x03 \x01(\r\x12\x0c\n\x04type\x18\x04 \x01(\t\x12\x0f\n\x07subtype\x18\x05 \x01(\t\"\xb7\x01\n\x08Relation\x12\x0f\n\x07\x61rgName\x18\x06 \x03(\t\x12.\n\x03\x61rg\x18\x07 \x03(\x0b\x32!.edu.stanford.nlp.pipeline.Entity\x12\x11\n\tsignature\x18\x08 \x01(\t\x12\x10\n\x08objectID\x18\x01 \x01(\t\x12\x13\n\x0b\x65xtentStart\x18\x02 \x01(\r\x12\x11\n\textentEnd\x18\x03 \x01(\r\x12\x0c\n\x04type\x18\x04 \x01(\t\x12\x0f\n\x07subtype\x18\x05 \x01(\t\"\xb2\x01\n\x08Operator\x12\x0c\n\x04name\x18\x01 \x02(\t\x12\x1b\n\x13quantifierSpanBegin\x18\x02 \x02(\x05\x12\x19\n\x11quantifierSpanEnd\x18\x03 \x02(\x05\x12\x18\n\x10subjectSpanBegin\x18\x04 \x02(\x05\x12\x16\n\x0esubjectSpanEnd\x18\x05 \x02(\x05\x12\x17\n\x0fobjectSpanBegin\x18\x06 \x02(\x05\x12\x15\n\robjectSpanEnd\x18\x07 \x02(\x05\"\xa9\x04\n\x08Polarity\x12K\n\x12projectEquivalence\x18\x01 \x02(\x0e\x32/.edu.stanford.nlp.pipeline.NaturalLogicRelation\x12Q\n\x18projectForwardEntailment\x18\x02 \x02(\x0e\x32/.edu.stanford.nlp.pipeline.NaturalLogicRelation\x12Q\n\x18projectReverseEntailment\x18\x03 \x02(\x0e\x32/.edu.stanford.nlp.pipeline.NaturalLogicRelation\x12H\n\x0fprojectNegation\x18\x04 \x02(\x0e\x32/.edu.stanford.nlp.pipeline.NaturalLogicRelation\x12K\n\x12projectAlternation\x18\x05 \x02(\x0e\x32/.edu.stanford.nlp.pipeline.NaturalLogicRelation\x12\x45\n\x0cprojectCover\x18\x06 \x02(\x0e\x32/.edu.stanford.nlp.pipeline.NaturalLogicRelation\x12L\n\x13projectIndependence\x18\x07 \x02(\x0e\x32/.edu.stanford.nlp.pipeline.NaturalLogicRelation\"\xdd\x02\n\nNERMention\x12\x15\n\rsentenceIndex\x18\x01 \x01(\r\x12%\n\x1dtokenStartInSentenceInclusive\x18\x02 \x02(\r\x12#\n\x1btokenEndInSentenceExclusive\x18\x03 \x02(\r\x12\x0b\n\x03ner\x18\x04 \x02(\t\x12\x15\n\rnormalizedNER\x18\x05 \x01(\t\x12\x12\n\nentityType\x18\x06 \x01(\t\x12/\n\x05timex\x18\x07 \x01(\x0b\x32 .edu.stanford.nlp.pipeline.Timex\x12\x17\n\x0fwikipediaEntity\x18\x08 \x01(\t\x12\x0e\n\x06gender\x18\t \x01(\t\x12\x1a\n\x12\x65ntityMentionIndex\x18\n \x01(\r\x12#\n\x1b\x63\x61nonicalEntityMentionIndex\x18\x0b \x01(\r\x12\x19\n\x11\x65ntityMentionText\x18\x0c \x01(\t\"Y\n\x10SentenceFragment\x12\x12\n\ntokenIndex\x18\x01 \x03(\r\x12\x0c\n\x04root\x18\x02 \x01(\r\x12\x14\n\x0c\x61ssumedTruth\x18\x03 \x01(\x08\x12\r\n\x05score\x18\x04 \x01(\x01\":\n\rTokenLocation\x12\x15\n\rsentenceIndex\x18\x01 \x01(\r\x12\x12\n\ntokenIndex\x18\x02 \x01(\r\"\x9a\x03\n\x0eRelationTriple\x12\x0f\n\x07subject\x18\x01 \x01(\t\x12\x10\n\x08relation\x18\x02 \x01(\t\x12\x0e\n\x06object\x18\x03 \x01(\t\x12\x12\n\nconfidence\x18\x04 \x01(\x01\x12?\n\rsubjectTokens\x18\r \x03(\x0b\x32(.edu.stanford.nlp.pipeline.TokenLocation\x12@\n\x0erelationTokens\x18\x0e \x03(\x0b\x32(.edu.stanford.nlp.pipeline.TokenLocation\x12>\n\x0cobjectTokens\x18\x0f \x03(\x0b\x32(.edu.stanford.nlp.pipeline.TokenLocation\x12\x38\n\x04tree\x18\x08 \x01(\x0b\x32*.edu.stanford.nlp.pipeline.DependencyGraph\x12\x0e\n\x06istmod\x18\t \x01(\x08\x12\x10\n\x08prefixBe\x18\n \x01(\x08\x12\x10\n\x08suffixBe\x18\x0b \x01(\x08\x12\x10\n\x08suffixOf\x18\x0c \x01(\x08\"-\n\x0fMapStringString\x12\x0b\n\x03key\x18\x01 \x03(\t\x12\r\n\x05value\x18\x02 \x03(\t\"*\n\x0cMapIntString\x12\x0b\n\x03key\x18\x01 \x03(\r\x12\r\n\x05value\x18\x02 \x03(\t\"\xfc\x01\n\x07Section\x12\x11\n\tcharBegin\x18\x01 \x02(\r\x12\x0f\n\x07\x63harEnd\x18\x02 \x02(\r\x12\x0e\n\x06\x61uthor\x18\x03 \x01(\t\x12\x17\n\x0fsentenceIndexes\x18\x04 \x03(\r\x12\x10\n\x08\x64\x61tetime\x18\x05 \x01(\t\x12\x30\n\x06quotes\x18\x06 \x03(\x0b\x32 .edu.stanford.nlp.pipeline.Quote\x12\x17\n\x0f\x61uthorCharBegin\x18\x07 \x01(\r\x12\x15\n\rauthorCharEnd\x18\x08 \x01(\r\x12\x30\n\x06xmlTag\x18\t \x02(\x0b\x32 .edu.stanford.nlp.pipeline.Token\"\xe4\x01\n\x0eSemgrexRequest\x12\x0f\n\x07semgrex\x18\x01 \x03(\t\x12\x45\n\x05query\x18\x02 \x03(\x0b\x32\x36.edu.stanford.nlp.pipeline.SemgrexRequest.Dependencies\x1az\n\x0c\x44\x65pendencies\x12/\n\x05token\x18\x01 \x03(\x0b\x32 .edu.stanford.nlp.pipeline.Token\x12\x39\n\x05graph\x18\x02 \x02(\x0b\x32*.edu.stanford.nlp.pipeline.DependencyGraph\"\x8a\x04\n\x0fSemgrexResponse\x12\x46\n\x06result\x18\x01 \x03(\x0b\x32\x36.edu.stanford.nlp.pipeline.SemgrexResponse.GraphResult\x1a-\n\tNamedNode\x12\x0c\n\x04name\x18\x01 \x02(\t\x12\x12\n\nmatchIndex\x18\x02 \x02(\x05\x1a+\n\rNamedRelation\x12\x0c\n\x04name\x18\x01 \x02(\t\x12\x0c\n\x04reln\x18\x02 \x02(\t\x1a\xa7\x01\n\x05Match\x12\x12\n\nmatchIndex\x18\x01 \x02(\x05\x12\x42\n\x04node\x18\x02 \x03(\x0b\x32\x34.edu.stanford.nlp.pipeline.SemgrexResponse.NamedNode\x12\x46\n\x04reln\x18\x03 \x03(\x0b\x32\x38.edu.stanford.nlp.pipeline.SemgrexResponse.NamedRelation\x1aP\n\rSemgrexResult\x12?\n\x05match\x18\x01 \x03(\x0b\x32\x30.edu.stanford.nlp.pipeline.SemgrexResponse.Match\x1aW\n\x0bGraphResult\x12H\n\x06result\x18\x01 \x03(\x0b\x32\x38.edu.stanford.nlp.pipeline.SemgrexResponse.SemgrexResult\"W\n\x12TokensRegexRequest\x12\x30\n\x03\x64oc\x18\x01 \x02(\x0b\x32#.edu.stanford.nlp.pipeline.Document\x12\x0f\n\x07pattern\x18\x02 \x03(\t\"\xa7\x03\n\x13TokensRegexResponse\x12J\n\x05match\x18\x01 \x03(\x0b\x32;.edu.stanford.nlp.pipeline.TokensRegexResponse.PatternMatch\x1a\x39\n\rMatchLocation\x12\x0c\n\x04text\x18\x01 \x01(\t\x12\r\n\x05\x62\x65gin\x18\x02 \x01(\x05\x12\x0b\n\x03\x65nd\x18\x03 \x01(\x05\x1a\xb3\x01\n\x05Match\x12\x10\n\x08sentence\x18\x01 \x02(\x05\x12K\n\x05match\x18\x02 \x02(\x0b\x32<.edu.stanford.nlp.pipeline.TokensRegexResponse.MatchLocation\x12K\n\x05group\x18\x03 \x03(\x0b\x32<.edu.stanford.nlp.pipeline.TokensRegexResponse.MatchLocation\x1aS\n\x0cPatternMatch\x12\x43\n\x05match\x18\x01 \x03(\x0b\x32\x34.edu.stanford.nlp.pipeline.TokensRegexResponse.Match\"\xae\x01\n\x19\x44\x65pendencyEnhancerRequest\x12\x35\n\x08\x64ocument\x18\x01 \x02(\x0b\x32#.edu.stanford.nlp.pipeline.Document\x12\x37\n\x08language\x18\x02 \x01(\x0e\x32#.edu.stanford.nlp.pipeline.LanguageH\x00\x12\x1a\n\x10relativePronouns\x18\x03 \x01(\tH\x00\x42\x05\n\x03ref\"\xb4\x01\n\x12\x46lattenedParseTree\x12\x41\n\x05nodes\x18\x01 \x03(\x0b\x32\x32.edu.stanford.nlp.pipeline.FlattenedParseTree.Node\x1a[\n\x04Node\x12\x12\n\x08openNode\x18\x01 \x01(\x08H\x00\x12\x13\n\tcloseNode\x18\x02 \x01(\x08H\x00\x12\x0f\n\x05value\x18\x03 \x01(\tH\x00\x12\r\n\x05score\x18\x04 \x01(\x01\x42\n\n\x08\x63ontents\"\xf6\x01\n\x15\x45valuateParserRequest\x12N\n\x08treebank\x18\x01 \x03(\x0b\x32<.edu.stanford.nlp.pipeline.EvaluateParserRequest.ParseResult\x1a\x8c\x01\n\x0bParseResult\x12;\n\x04gold\x18\x01 \x02(\x0b\x32-.edu.stanford.nlp.pipeline.FlattenedParseTree\x12@\n\tpredicted\x18\x02 \x03(\x0b\x32-.edu.stanford.nlp.pipeline.FlattenedParseTree\"5\n\x16\x45valuateParserResponse\x12\n\n\x02\x66\x31\x18\x01 \x02(\x01\x12\x0f\n\x07kbestF1\x18\x02 \x01(\x01\"\xc8\x01\n\x0fTsurgeonRequest\x12H\n\noperations\x18\x01 \x03(\x0b\x32\x34.edu.stanford.nlp.pipeline.TsurgeonRequest.Operation\x12<\n\x05trees\x18\x02 \x03(\x0b\x32-.edu.stanford.nlp.pipeline.FlattenedParseTree\x1a-\n\tOperation\x12\x0e\n\x06tregex\x18\x01 \x02(\t\x12\x10\n\x08tsurgeon\x18\x02 \x03(\t\"P\n\x10TsurgeonResponse\x12<\n\x05trees\x18\x01 \x03(\x0b\x32-.edu.stanford.nlp.pipeline.FlattenedParseTree*\xa3\x01\n\x08Language\x12\x0b\n\x07Unknown\x10\x00\x12\x07\n\x03\x41ny\x10\x01\x12\n\n\x06\x41rabic\x10\x02\x12\x0b\n\x07\x43hinese\x10\x03\x12\x0b\n\x07\x45nglish\x10\x04\x12\n\n\x06German\x10\x05\x12\n\n\x06\x46rench\x10\x06\x12\n\n\x06Hebrew\x10\x07\x12\x0b\n\x07Spanish\x10\x08\x12\x14\n\x10UniversalEnglish\x10\t\x12\x14\n\x10UniversalChinese\x10\n*h\n\tSentiment\x12\x13\n\x0fSTRONG_NEGATIVE\x10\x00\x12\x11\n\rWEAK_NEGATIVE\x10\x01\x12\x0b\n\x07NEUTRAL\x10\x02\x12\x11\n\rWEAK_POSITIVE\x10\x03\x12\x13\n\x0fSTRONG_POSITIVE\x10\x04*\x93\x01\n\x14NaturalLogicRelation\x12\x0f\n\x0b\x45QUIVALENCE\x10\x00\x12\x16\n\x12\x46ORWARD_ENTAILMENT\x10\x01\x12\x16\n\x12REVERSE_ENTAILMENT\x10\x02\x12\x0c\n\x08NEGATION\x10\x03\x12\x0f\n\x0b\x41LTERNATION\x10\x04\x12\t\n\x05\x43OVER\x10\x05\x12\x10\n\x0cINDEPENDENCE\x10\x06\x42*\n\x19\x65\x64u.stanford.nlp.pipelineB\rCoreNLPProtos')

_LANGUAGE = DESCRIPTOR.enum_types_by_name['Language']
Language = enum_type_wrapper.EnumTypeWrapper(_LANGUAGE)
_SENTIMENT = DESCRIPTOR.enum_types_by_name['Sentiment']
Sentiment = enum_type_wrapper.EnumTypeWrapper(_SENTIMENT)
_NATURALLOGICRELATION = DESCRIPTOR.enum_types_by_name['NaturalLogicRelation']
NaturalLogicRelation = enum_type_wrapper.EnumTypeWrapper(_NATURALLOGICRELATION)
Unknown = 0
Any = 1
Arabic = 2
Chinese = 3
English = 4
German = 5
French = 6
Hebrew = 7
Spanish = 8
UniversalEnglish = 9
UniversalChinese = 10
STRONG_NEGATIVE = 0
WEAK_NEGATIVE = 1
NEUTRAL = 2
WEAK_POSITIVE = 3
STRONG_POSITIVE = 4
EQUIVALENCE = 0
FORWARD_ENTAILMENT = 1
REVERSE_ENTAILMENT = 2
NEGATION = 3
ALTERNATION = 4
COVER = 5
INDEPENDENCE = 6


_DOCUMENT = DESCRIPTOR.message_types_by_name['Document']
_SENTENCE = DESCRIPTOR.message_types_by_name['Sentence']
_TOKEN = DESCRIPTOR.message_types_by_name['Token']
_QUOTE = DESCRIPTOR.message_types_by_name['Quote']
_PARSETREE = DESCRIPTOR.message_types_by_name['ParseTree']
_DEPENDENCYGRAPH = DESCRIPTOR.message_types_by_name['DependencyGraph']
_DEPENDENCYGRAPH_NODE = _DEPENDENCYGRAPH.nested_types_by_name['Node']
_DEPENDENCYGRAPH_EDGE = _DEPENDENCYGRAPH.nested_types_by_name['Edge']
_COREFCHAIN = DESCRIPTOR.message_types_by_name['CorefChain']
_COREFCHAIN_COREFMENTION = _COREFCHAIN.nested_types_by_name['CorefMention']
_MENTION = DESCRIPTOR.message_types_by_name['Mention']
_INDEXEDWORD = DESCRIPTOR.message_types_by_name['IndexedWord']
_SPEAKERINFO = DESCRIPTOR.message_types_by_name['SpeakerInfo']
_SPAN = DESCRIPTOR.message_types_by_name['Span']
_TIMEX = DESCRIPTOR.message_types_by_name['Timex']
_ENTITY = DESCRIPTOR.message_types_by_name['Entity']
_RELATION = DESCRIPTOR.message_types_by_name['Relation']
_OPERATOR = DESCRIPTOR.message_types_by_name['Operator']
_POLARITY = DESCRIPTOR.message_types_by_name['Polarity']
_NERMENTION = DESCRIPTOR.message_types_by_name['NERMention']
_SENTENCEFRAGMENT = DESCRIPTOR.message_types_by_name['SentenceFragment']
_TOKENLOCATION = DESCRIPTOR.message_types_by_name['TokenLocation']
_RELATIONTRIPLE = DESCRIPTOR.message_types_by_name['RelationTriple']
_MAPSTRINGSTRING = DESCRIPTOR.message_types_by_name['MapStringString']
_MAPINTSTRING = DESCRIPTOR.message_types_by_name['MapIntString']
_SECTION = DESCRIPTOR.message_types_by_name['Section']
_SEMGREXREQUEST = DESCRIPTOR.message_types_by_name['SemgrexRequest']
_SEMGREXREQUEST_DEPENDENCIES = _SEMGREXREQUEST.nested_types_by_name['Dependencies']
_SEMGREXRESPONSE = DESCRIPTOR.message_types_by_name['SemgrexResponse']
_SEMGREXRESPONSE_NAMEDNODE = _SEMGREXRESPONSE.nested_types_by_name['NamedNode']
_SEMGREXRESPONSE_NAMEDRELATION = _SEMGREXRESPONSE.nested_types_by_name['NamedRelation']
_SEMGREXRESPONSE_MATCH = _SEMGREXRESPONSE.nested_types_by_name['Match']
_SEMGREXRESPONSE_SEMGREXRESULT = _SEMGREXRESPONSE.nested_types_by_name['SemgrexResult']
_SEMGREXRESPONSE_GRAPHRESULT = _SEMGREXRESPONSE.nested_types_by_name['GraphResult']
_TOKENSREGEXREQUEST = DESCRIPTOR.message_types_by_name['TokensRegexRequest']
_TOKENSREGEXRESPONSE = DESCRIPTOR.message_types_by_name['TokensRegexResponse']
_TOKENSREGEXRESPONSE_MATCHLOCATION = _TOKENSREGEXRESPONSE.nested_types_by_name['MatchLocation']
_TOKENSREGEXRESPONSE_MATCH = _TOKENSREGEXRESPONSE.nested_types_by_name['Match']
_TOKENSREGEXRESPONSE_PATTERNMATCH = _TOKENSREGEXRESPONSE.nested_types_by_name['PatternMatch']
_DEPENDENCYENHANCERREQUEST = DESCRIPTOR.message_types_by_name['DependencyEnhancerRequest']
_FLATTENEDPARSETREE = DESCRIPTOR.message_types_by_name['FlattenedParseTree']
_FLATTENEDPARSETREE_NODE = _FLATTENEDPARSETREE.nested_types_by_name['Node']
_EVALUATEPARSERREQUEST = DESCRIPTOR.message_types_by_name['EvaluateParserRequest']
_EVALUATEPARSERREQUEST_PARSERESULT = _EVALUATEPARSERREQUEST.nested_types_by_name['ParseResult']
_EVALUATEPARSERRESPONSE = DESCRIPTOR.message_types_by_name['EvaluateParserResponse']
_TSURGEONREQUEST = DESCRIPTOR.message_types_by_name['TsurgeonRequest']
_TSURGEONREQUEST_OPERATION = _TSURGEONREQUEST.nested_types_by_name['Operation']
_TSURGEONRESPONSE = DESCRIPTOR.message_types_by_name['TsurgeonResponse']
Document = _reflection.GeneratedProtocolMessageType('Document', (_message.Message,), {
  'DESCRIPTOR' : _DOCUMENT,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.Document)
  })
_sym_db.RegisterMessage(Document)

Sentence = _reflection.GeneratedProtocolMessageType('Sentence', (_message.Message,), {
  'DESCRIPTOR' : _SENTENCE,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.Sentence)
  })
_sym_db.RegisterMessage(Sentence)

Token = _reflection.GeneratedProtocolMessageType('Token', (_message.Message,), {
  'DESCRIPTOR' : _TOKEN,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.Token)
  })
_sym_db.RegisterMessage(Token)

Quote = _reflection.GeneratedProtocolMessageType('Quote', (_message.Message,), {
  'DESCRIPTOR' : _QUOTE,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.Quote)
  })
_sym_db.RegisterMessage(Quote)

ParseTree = _reflection.GeneratedProtocolMessageType('ParseTree', (_message.Message,), {
  'DESCRIPTOR' : _PARSETREE,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.ParseTree)
  })
_sym_db.RegisterMessage(ParseTree)

DependencyGraph = _reflection.GeneratedProtocolMessageType('DependencyGraph', (_message.Message,), {

  'Node' : _reflection.GeneratedProtocolMessageType('Node', (_message.Message,), {
    'DESCRIPTOR' : _DEPENDENCYGRAPH_NODE,
    '__module__' : 'CoreNLP_pb2'
    # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.DependencyGraph.Node)
    })
  ,

  'Edge' : _reflection.GeneratedProtocolMessageType('Edge', (_message.Message,), {
    'DESCRIPTOR' : _DEPENDENCYGRAPH_EDGE,
    '__module__' : 'CoreNLP_pb2'
    # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.DependencyGraph.Edge)
    })
  ,
  'DESCRIPTOR' : _DEPENDENCYGRAPH,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.DependencyGraph)
  })
_sym_db.RegisterMessage(DependencyGraph)
_sym_db.RegisterMessage(DependencyGraph.Node)
_sym_db.RegisterMessage(DependencyGraph.Edge)

CorefChain = _reflection.GeneratedProtocolMessageType('CorefChain', (_message.Message,), {

  'CorefMention' : _reflection.GeneratedProtocolMessageType('CorefMention', (_message.Message,), {
    'DESCRIPTOR' : _COREFCHAIN_COREFMENTION,
    '__module__' : 'CoreNLP_pb2'
    # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.CorefChain.CorefMention)
    })
  ,
  'DESCRIPTOR' : _COREFCHAIN,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.CorefChain)
  })
_sym_db.RegisterMessage(CorefChain)
_sym_db.RegisterMessage(CorefChain.CorefMention)

Mention = _reflection.GeneratedProtocolMessageType('Mention', (_message.Message,), {
  'DESCRIPTOR' : _MENTION,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.Mention)
  })
_sym_db.RegisterMessage(Mention)

IndexedWord = _reflection.GeneratedProtocolMessageType('IndexedWord', (_message.Message,), {
  'DESCRIPTOR' : _INDEXEDWORD,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.IndexedWord)
  })
_sym_db.RegisterMessage(IndexedWord)

SpeakerInfo = _reflection.GeneratedProtocolMessageType('SpeakerInfo', (_message.Message,), {
  'DESCRIPTOR' : _SPEAKERINFO,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.SpeakerInfo)
  })
_sym_db.RegisterMessage(SpeakerInfo)

Span = _reflection.GeneratedProtocolMessageType('Span', (_message.Message,), {
  'DESCRIPTOR' : _SPAN,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.Span)
  })
_sym_db.RegisterMessage(Span)

Timex = _reflection.GeneratedProtocolMessageType('Timex', (_message.Message,), {
  'DESCRIPTOR' : _TIMEX,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.Timex)
  })
_sym_db.RegisterMessage(Timex)

Entity = _reflection.GeneratedProtocolMessageType('Entity', (_message.Message,), {
  'DESCRIPTOR' : _ENTITY,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.Entity)
  })
_sym_db.RegisterMessage(Entity)

Relation = _reflection.GeneratedProtocolMessageType('Relation', (_message.Message,), {
  'DESCRIPTOR' : _RELATION,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.Relation)
  })
_sym_db.RegisterMessage(Relation)

Operator = _reflection.GeneratedProtocolMessageType('Operator', (_message.Message,), {
  'DESCRIPTOR' : _OPERATOR,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.Operator)
  })
_sym_db.RegisterMessage(Operator)

Polarity = _reflection.GeneratedProtocolMessageType('Polarity', (_message.Message,), {
  'DESCRIPTOR' : _POLARITY,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.Polarity)
  })
_sym_db.RegisterMessage(Polarity)

NERMention = _reflection.GeneratedProtocolMessageType('NERMention', (_message.Message,), {
  'DESCRIPTOR' : _NERMENTION,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.NERMention)
  })
_sym_db.RegisterMessage(NERMention)

SentenceFragment = _reflection.GeneratedProtocolMessageType('SentenceFragment', (_message.Message,), {
  'DESCRIPTOR' : _SENTENCEFRAGMENT,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.SentenceFragment)
  })
_sym_db.RegisterMessage(SentenceFragment)

TokenLocation = _reflection.GeneratedProtocolMessageType('TokenLocation', (_message.Message,), {
  'DESCRIPTOR' : _TOKENLOCATION,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.TokenLocation)
  })
_sym_db.RegisterMessage(TokenLocation)

RelationTriple = _reflection.GeneratedProtocolMessageType('RelationTriple', (_message.Message,), {
  'DESCRIPTOR' : _RELATIONTRIPLE,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.RelationTriple)
  })
_sym_db.RegisterMessage(RelationTriple)

MapStringString = _reflection.GeneratedProtocolMessageType('MapStringString', (_message.Message,), {
  'DESCRIPTOR' : _MAPSTRINGSTRING,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.MapStringString)
  })
_sym_db.RegisterMessage(MapStringString)

MapIntString = _reflection.GeneratedProtocolMessageType('MapIntString', (_message.Message,), {
  'DESCRIPTOR' : _MAPINTSTRING,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.MapIntString)
  })
_sym_db.RegisterMessage(MapIntString)

Section = _reflection.GeneratedProtocolMessageType('Section', (_message.Message,), {
  'DESCRIPTOR' : _SECTION,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.Section)
  })
_sym_db.RegisterMessage(Section)

SemgrexRequest = _reflection.GeneratedProtocolMessageType('SemgrexRequest', (_message.Message,), {

  'Dependencies' : _reflection.GeneratedProtocolMessageType('Dependencies', (_message.Message,), {
    'DESCRIPTOR' : _SEMGREXREQUEST_DEPENDENCIES,
    '__module__' : 'CoreNLP_pb2'
    # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.SemgrexRequest.Dependencies)
    })
  ,
  'DESCRIPTOR' : _SEMGREXREQUEST,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.SemgrexRequest)
  })
_sym_db.RegisterMessage(SemgrexRequest)
_sym_db.RegisterMessage(SemgrexRequest.Dependencies)

SemgrexResponse = _reflection.GeneratedProtocolMessageType('SemgrexResponse', (_message.Message,), {

  'NamedNode' : _reflection.GeneratedProtocolMessageType('NamedNode', (_message.Message,), {
    'DESCRIPTOR' : _SEMGREXRESPONSE_NAMEDNODE,
    '__module__' : 'CoreNLP_pb2'
    # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.SemgrexResponse.NamedNode)
    })
  ,

  'NamedRelation' : _reflection.GeneratedProtocolMessageType('NamedRelation', (_message.Message,), {
    'DESCRIPTOR' : _SEMGREXRESPONSE_NAMEDRELATION,
    '__module__' : 'CoreNLP_pb2'
    # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.SemgrexResponse.NamedRelation)
    })
  ,

  'Match' : _reflection.GeneratedProtocolMessageType('Match', (_message.Message,), {
    'DESCRIPTOR' : _SEMGREXRESPONSE_MATCH,
    '__module__' : 'CoreNLP_pb2'
    # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.SemgrexResponse.Match)
    })
  ,

  'SemgrexResult' : _reflection.GeneratedProtocolMessageType('SemgrexResult', (_message.Message,), {
    'DESCRIPTOR' : _SEMGREXRESPONSE_SEMGREXRESULT,
    '__module__' : 'CoreNLP_pb2'
    # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.SemgrexResponse.SemgrexResult)
    })
  ,

  'GraphResult' : _reflection.GeneratedProtocolMessageType('GraphResult', (_message.Message,), {
    'DESCRIPTOR' : _SEMGREXRESPONSE_GRAPHRESULT,
    '__module__' : 'CoreNLP_pb2'
    # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.SemgrexResponse.GraphResult)
    })
  ,
  'DESCRIPTOR' : _SEMGREXRESPONSE,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.SemgrexResponse)
  })
_sym_db.RegisterMessage(SemgrexResponse)
_sym_db.RegisterMessage(SemgrexResponse.NamedNode)
_sym_db.RegisterMessage(SemgrexResponse.NamedRelation)
_sym_db.RegisterMessage(SemgrexResponse.Match)
_sym_db.RegisterMessage(SemgrexResponse.SemgrexResult)
_sym_db.RegisterMessage(SemgrexResponse.GraphResult)

TokensRegexRequest = _reflection.GeneratedProtocolMessageType('TokensRegexRequest', (_message.Message,), {
  'DESCRIPTOR' : _TOKENSREGEXREQUEST,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.TokensRegexRequest)
  })
_sym_db.RegisterMessage(TokensRegexRequest)

TokensRegexResponse = _reflection.GeneratedProtocolMessageType('TokensRegexResponse', (_message.Message,), {

  'MatchLocation' : _reflection.GeneratedProtocolMessageType('MatchLocation', (_message.Message,), {
    'DESCRIPTOR' : _TOKENSREGEXRESPONSE_MATCHLOCATION,
    '__module__' : 'CoreNLP_pb2'
    # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.TokensRegexResponse.MatchLocation)
    })
  ,

  'Match' : _reflection.GeneratedProtocolMessageType('Match', (_message.Message,), {
    'DESCRIPTOR' : _TOKENSREGEXRESPONSE_MATCH,
    '__module__' : 'CoreNLP_pb2'
    # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.TokensRegexResponse.Match)
    })
  ,

  'PatternMatch' : _reflection.GeneratedProtocolMessageType('PatternMatch', (_message.Message,), {
    'DESCRIPTOR' : _TOKENSREGEXRESPONSE_PATTERNMATCH,
    '__module__' : 'CoreNLP_pb2'
    # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.TokensRegexResponse.PatternMatch)
    })
  ,
  'DESCRIPTOR' : _TOKENSREGEXRESPONSE,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.TokensRegexResponse)
  })
_sym_db.RegisterMessage(TokensRegexResponse)
_sym_db.RegisterMessage(TokensRegexResponse.MatchLocation)
_sym_db.RegisterMessage(TokensRegexResponse.Match)
_sym_db.RegisterMessage(TokensRegexResponse.PatternMatch)

DependencyEnhancerRequest = _reflection.GeneratedProtocolMessageType('DependencyEnhancerRequest', (_message.Message,), {
  'DESCRIPTOR' : _DEPENDENCYENHANCERREQUEST,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.DependencyEnhancerRequest)
  })
_sym_db.RegisterMessage(DependencyEnhancerRequest)

FlattenedParseTree = _reflection.GeneratedProtocolMessageType('FlattenedParseTree', (_message.Message,), {

  'Node' : _reflection.GeneratedProtocolMessageType('Node', (_message.Message,), {
    'DESCRIPTOR' : _FLATTENEDPARSETREE_NODE,
    '__module__' : 'CoreNLP_pb2'
    # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.FlattenedParseTree.Node)
    })
  ,
  'DESCRIPTOR' : _FLATTENEDPARSETREE,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.FlattenedParseTree)
  })
_sym_db.RegisterMessage(FlattenedParseTree)
_sym_db.RegisterMessage(FlattenedParseTree.Node)

EvaluateParserRequest = _reflection.GeneratedProtocolMessageType('EvaluateParserRequest', (_message.Message,), {

  'ParseResult' : _reflection.GeneratedProtocolMessageType('ParseResult', (_message.Message,), {
    'DESCRIPTOR' : _EVALUATEPARSERREQUEST_PARSERESULT,
    '__module__' : 'CoreNLP_pb2'
    # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.EvaluateParserRequest.ParseResult)
    })
  ,
  'DESCRIPTOR' : _EVALUATEPARSERREQUEST,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.EvaluateParserRequest)
  })
_sym_db.RegisterMessage(EvaluateParserRequest)
_sym_db.RegisterMessage(EvaluateParserRequest.ParseResult)

EvaluateParserResponse = _reflection.GeneratedProtocolMessageType('EvaluateParserResponse', (_message.Message,), {
  'DESCRIPTOR' : _EVALUATEPARSERRESPONSE,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.EvaluateParserResponse)
  })
_sym_db.RegisterMessage(EvaluateParserResponse)

TsurgeonRequest = _reflection.GeneratedProtocolMessageType('TsurgeonRequest', (_message.Message,), {

  'Operation' : _reflection.GeneratedProtocolMessageType('Operation', (_message.Message,), {
    'DESCRIPTOR' : _TSURGEONREQUEST_OPERATION,
    '__module__' : 'CoreNLP_pb2'
    # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.TsurgeonRequest.Operation)
    })
  ,
  'DESCRIPTOR' : _TSURGEONREQUEST,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.TsurgeonRequest)
  })
_sym_db.RegisterMessage(TsurgeonRequest)
_sym_db.RegisterMessage(TsurgeonRequest.Operation)

TsurgeonResponse = _reflection.GeneratedProtocolMessageType('TsurgeonResponse', (_message.Message,), {
  'DESCRIPTOR' : _TSURGEONRESPONSE,
  '__module__' : 'CoreNLP_pb2'
  # @@protoc_insertion_point(class_scope:edu.stanford.nlp.pipeline.TsurgeonResponse)
  })
_sym_db.RegisterMessage(TsurgeonResponse)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\031edu.stanford.nlp.pipelineB\rCoreNLPProtos'
  _DEPENDENCYGRAPH.fields_by_name['root']._options = None
  _DEPENDENCYGRAPH.fields_by_name['root']._serialized_options = b'\020\001'
  _LANGUAGE._serialized_start=11921
  _LANGUAGE._serialized_end=12084
  _SENTIMENT._serialized_start=12086
  _SENTIMENT._serialized_end=12190
  _NATURALLOGICRELATION._serialized_start=12193
  _NATURALLOGICRELATION._serialized_end=12340
  _DOCUMENT._serialized_start=45
  _DOCUMENT._serialized_end=782
  _SENTENCE._serialized_start=785
  _SENTENCE._serialized_end=2820
  _TOKEN._serialized_start=2823
  _TOKEN._serialized_end=4425
  _QUOTE._serialized_start=4428
  _QUOTE._serialized_end=4912
  _PARSETREE._serialized_start=4915
  _PARSETREE._serialized_end=5114
  _DEPENDENCYGRAPH._serialized_start=5117
  _DEPENDENCYGRAPH._serialized_end=5523
  _DEPENDENCYGRAPH_NODE._serialized_start=5280
  _DEPENDENCYGRAPH_NODE._serialized_end=5348
  _DEPENDENCYGRAPH_EDGE._serialized_start=5351
  _DEPENDENCYGRAPH_EDGE._serialized_end=5523
  _COREFCHAIN._serialized_start=5526
  _COREFCHAIN._serialized_end=5852
  _COREFCHAIN_COREFMENTION._serialized_start=5651
  _COREFCHAIN_COREFMENTION._serialized_end=5852
  _MENTION._serialized_start=5855
  _MENTION._serialized_end=6990
  _INDEXEDWORD._serialized_start=6992
  _INDEXEDWORD._serialized_end=7080
  _SPEAKERINFO._serialized_start=7082
  _SPEAKERINFO._serialized_end=7134
  _SPAN._serialized_start=7136
  _SPAN._serialized_end=7170
  _TIMEX._serialized_start=7172
  _TIMEX._serialized_end=7291
  _ENTITY._serialized_start=7294
  _ENTITY._serialized_end=7513
  _RELATION._serialized_start=7516
  _RELATION._serialized_end=7699
  _OPERATOR._serialized_start=7702
  _OPERATOR._serialized_end=7880
  _POLARITY._serialized_start=7883
  _POLARITY._serialized_end=8436
  _NERMENTION._serialized_start=8439
  _NERMENTION._serialized_end=8788
  _SENTENCEFRAGMENT._serialized_start=8790
  _SENTENCEFRAGMENT._serialized_end=8879
  _TOKENLOCATION._serialized_start=8881
  _TOKENLOCATION._serialized_end=8939
  _RELATIONTRIPLE._serialized_start=8942
  _RELATIONTRIPLE._serialized_end=9352
  _MAPSTRINGSTRING._serialized_start=9354
  _MAPSTRINGSTRING._serialized_end=9399
  _MAPINTSTRING._serialized_start=9401
  _MAPINTSTRING._serialized_end=9443
  _SECTION._serialized_start=9446
  _SECTION._serialized_end=9698
  _SEMGREXREQUEST._serialized_start=9701
  _SEMGREXREQUEST._serialized_end=9929
  _SEMGREXREQUEST_DEPENDENCIES._serialized_start=9807
  _SEMGREXREQUEST_DEPENDENCIES._serialized_end=9929
  _SEMGREXRESPONSE._serialized_start=9932
  _SEMGREXRESPONSE._serialized_end=10454
  _SEMGREXRESPONSE_NAMEDNODE._serialized_start=10023
  _SEMGREXRESPONSE_NAMEDNODE._serialized_end=10068
  _SEMGREXRESPONSE_NAMEDRELATION._serialized_start=10070
  _SEMGREXRESPONSE_NAMEDRELATION._serialized_end=10113
  _SEMGREXRESPONSE_MATCH._serialized_start=10116
  _SEMGREXRESPONSE_MATCH._serialized_end=10283
  _SEMGREXRESPONSE_SEMGREXRESULT._serialized_start=10285
  _SEMGREXRESPONSE_SEMGREXRESULT._serialized_end=10365
  _SEMGREXRESPONSE_GRAPHRESULT._serialized_start=10367
  _SEMGREXRESPONSE_GRAPHRESULT._serialized_end=10454
  _TOKENSREGEXREQUEST._serialized_start=10456
  _TOKENSREGEXREQUEST._serialized_end=10543
  _TOKENSREGEXRESPONSE._serialized_start=10546
  _TOKENSREGEXRESPONSE._serialized_end=10969
  _TOKENSREGEXRESPONSE_MATCHLOCATION._serialized_start=10645
  _TOKENSREGEXRESPONSE_MATCHLOCATION._serialized_end=10702
  _TOKENSREGEXRESPONSE_MATCH._serialized_start=10705
  _TOKENSREGEXRESPONSE_MATCH._serialized_end=10884
  _TOKENSREGEXRESPONSE_PATTERNMATCH._serialized_start=10886
  _TOKENSREGEXRESPONSE_PATTERNMATCH._serialized_end=10969
  _DEPENDENCYENHANCERREQUEST._serialized_start=10972
  _DEPENDENCYENHANCERREQUEST._serialized_end=11146
  _FLATTENEDPARSETREE._serialized_start=11149
  _FLATTENEDPARSETREE._serialized_end=11329
  _FLATTENEDPARSETREE_NODE._serialized_start=11238
  _FLATTENEDPARSETREE_NODE._serialized_end=11329
  _EVALUATEPARSERREQUEST._serialized_start=11332
  _EVALUATEPARSERREQUEST._serialized_end=11578
  _EVALUATEPARSERREQUEST_PARSERESULT._serialized_start=11438
  _EVALUATEPARSERREQUEST_PARSERESULT._serialized_end=11578
  _EVALUATEPARSERRESPONSE._serialized_start=11580
  _EVALUATEPARSERRESPONSE._serialized_end=11633
  _TSURGEONREQUEST._serialized_start=11636
  _TSURGEONREQUEST._serialized_end=11836
  _TSURGEONREQUEST_OPERATION._serialized_start=11791
  _TSURGEONREQUEST_OPERATION._serialized_end=11836
  _TSURGEONRESPONSE._serialized_start=11838
  _TSURGEONRESPONSE._serialized_end=11918
# @@protoc_insertion_point(module_scope)
